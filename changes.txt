 What You Should Do
Convert Emlid's GPS Fixes
From lat/lon (EPSG:4326) → UTM (EPSG:32645)
→ Use this for your real-time rover position during navigation.

Keep All Internals in UTM
→ So your simulation logic remains untouched and consistent.

For Logging or Display (e.g. map, user interface):
You can convert the UTM positions back to lat/lon (EPSG:4326) if you want logs or visualizations in Google Maps style format.


Research suggests that implementing waypoint navigation with a 2 cm tolerance in Python is feasible by checking the distance from the rover to each waypoint and considering it reached if within 0.02 meters. The evidence leans toward using Euclidean distance for UTM coordinates or the Haversine formula for GPS coordinates, depending on the data format. The user's idea of creating a range of waypoints (e.g., 1, 2, 3) is likely a misunderstanding, and the standard approach is to define a single waypoint with a tolerance zone. By following the steps outlined, including reading waypoints from CSV, calculating distances, and implementing a navigation loop, you can achieve the desired functionality for your agricultural rover project.
Conclusion
The waypoint_threshold of 2 cm in your rover’s code defines a small area around each waypoint, allowing the rover to move on once it’s within 2 cm, rather than requiring an exact match. It’s used in the move_precisely_to_point method to check if the rover has reached a waypoint, ensuring smooth navigation by accommodating GPS inaccuracies, terrain variations, and mechanical limitations. This makes the system practical for farm tasks, aligns with the Emlid Reach M2’s centimeter-level accuracy, and supports navigation at 1.5 m/s, keeping the rover on track while maintaining high precision.


Complete Explanation of RTK GPS Health Checks
1. RTK Status Check
pythondef check_rtk_status(self):
What it does: Verifies that the GPS receiver has an "RTK Fixed" position solution.
Why it's important: RTK Fixed status provides centimeter-level positioning accuracy, which is critical for precision agriculture applications. Other modes (Float, Single) are less accurate.
Implementation details:

Checks the fix_quality value (4 = RTK Fixed, 5 = RTK Float, 1 = GPS Single)
Logs appropriate warnings when not in RTK Fixed mode
Continues operation but flags potential accuracy issues

2. Satellite Count Check
pythondef check_satellite_count(self):
What it does: Ensures that enough GNSS satellites are being tracked.
Why it's important: More satellites generally means better position accuracy and reliability. Fewer than 4 satellites makes position calculation impossible; 6+ is recommended for RTK.
Implementation details:

Counts total tracked satellites
Errors if fewer than 4 satellites (minimum for position)
Warns if fewer than 6 satellites (minimum recommended for RTK)
Passes if 6 or more satellites are tracked

3. DOP Values Check
pythondef check_dop_values(self):
What it does: Examines Position Dilution of Precision (PDOP), Horizontal DOP (HDOP), and Vertical DOP (VDOP) values.
Why it's important: DOP values indicate the geometric quality of the satellite configuration. Lower values (below 2.0) indicate better accuracy potential.
Implementation details:

Checks if all DOP values are available
Errors if any DOP value exceeds 2.0 (poor geometry)
Warns if any DOP value exceeds 1.5 (marginal geometry)
Passes if all DOP values are below 1.5 (good geometry)

4. Signal Strength Check
pythondef check_signal_strength(self):
What it does: Verifies that the average signal-to-noise ratio (SNR) is sufficient.
Why it's important: Strong signals provide more reliable measurements and better resistance to interference.
Implementation details:

Calculates average SNR across all satellites
Errors if average SNR is below 35 dB-Hz (poor signal)
Warns if average SNR is below 45 dB-Hz (marginal signal)
Passes if average SNR is 45 dB-Hz or higher (good signal)

5. Age of Corrections Check
pythondef check_age_of_corrections(self):
What it does: Monitors how old the RTK correction data is when received by the rover.
Why it's important: Fresh corrections are essential for high-precision RTK positioning. Old corrections can degrade accuracy or cause the system to fall back to float mode.
Implementation details:

Now checks age in milliseconds for higher precision
Warns if corrections are older than 100ms (accuracy may degrade)
Aborts if corrections are older than 200ms (to avoid compromised accuracy)
Provides detailed logging of correction age status

6. Position Validity Check
pythondef check_position_validity(self):
What it does: Validates that the GPS coordinates are within expected boundaries.
Why it's important: Prevents using invalid coordinates (like 0,0) or positions outside the working area, which could lead to navigation errors.
Implementation details:

Checks for zero coordinates (common GPS error condition)
Validates coordinates are within India's geographic boundaries
Ensures coordinates are within the specific farm boundaries
Detailed error reporting for each validation level

7. Coordinate System Check
pythondef check_coordinate_system(self):
What it does: Verifies that latitude/longitude coordinates can be properly converted to UTM projection.
Why it's important: Many precision agriculture applications use local coordinate systems like UTM for consistent distance calculations.
Implementation details:

Checks if easting/northing values were successfully calculated
Logs errors if conversion failed
Passes if valid UTM coordinates are available

8. Multipath Detection Check
pythondef check_multipath_detection(self):
What it does: Looks for signs of multipath interference (signals reflecting off surfaces before reaching the antenna).
Why it's important: Multipath can degrade position accuracy by causing measurement errors.
Implementation details:

Calculates standard deviation of SNR values across satellites
High SNR variation (>15) suggests multipath interference
Logs appropriate warnings when multipath is detected

9. GPS Sync Time Check
pythondef check_gps_sync_time(self):
What it does: Verifies the time synchronization between the GPS receiver's clock and GPS system time.
Why it's important: Precise timing is essential for RTK positioning and other time-sensitive operations.
Implementation details:

Checks time error in nanoseconds (now with higher precision)
Verifies PPS (Pulse Per Second) jitter is within acceptable limits
Errors if time error exceeds 50ns (GPS timing standard)
Warns if PPS jitter exceeds 20ns (timing stability)
Provides detailed logging of timing performance

10. Receiver Clock Stability Check
pythondef check_receiver_clock_stability(self):
What it does: Monitors the stability of the GPS receiver's internal clock.
Why it's important: Stable clock behavior ensures consistent timing for measurements.
Implementation details:

Measures clock offset in milliseconds
Errors if offset exceeds 200ms (severe instability)
Warns if offset exceeds 50ms (potential instability)
Passes if offset is under 50ms (stable operation)

11. Power Supply Check
pythondef check_power_supply(self):
What it does: Monitors the power supply by checking if serial data is being received consistently.
Why it's important: Unstable power can cause intermittent operation and data loss.
Implementation details:

Checks if serial data is being received
Errors if no data is received for 5 seconds
Passes if data flow is consistent

12. Firmware Updates Check
pythondef check_firmware_updates(self):
What it does: Reminds operator to verify firmware is up to date (manual check).
Why it's important: Outdated firmware may lack bug fixes or performance improvements.
Implementation details:

Logs a reminder to check firmware via Emlid Flow app
This is a manual check that auto-passes in the code

13. Battery Level Check
pythondef check_battery_level(self):
What it does: Reminds operator to verify battery level is sufficient (manual check).
Why it's important: Low battery can cause sudden power loss or degraded performance.
Implementation details:

Logs a reminder to check battery level is above 20%
This is a manual check that auto-passes in the code

14. Hardware Status Check
pythondef check_hardware_status(self):
What it does: Verifies that the hardware is functioning by monitoring serial connection.
Why it's important: Hardware failures can cause positioning errors or complete system failure.
Implementation details:

Checks if serial connection is active and receiving data
Errors if no data is available or connection is lost
Passes if serial connection is stable

15. Constellation Diversity Check
pythondef check_constellation_diversity(self):
What it does: Ensures the receiver is tracking satellites from multiple GNSS constellations (GPS, GLONASS, etc.).
Why it's important: Using multiple constellations improves reliability and coverage.
Implementation details:

Counts unique satellite constellations being tracked
Errors if fewer than 2 constellations are available
Passes if 2 or more constellations are tracked

16. Elevation Mask Check
pythondef check_elevation_mask(self):
What it does: Verifies satellites are being tracked above the minimum elevation angle.
Why it's important: Low-elevation satellites are more susceptible to atmospheric errors and multipath.
Implementation details:

Finds the minimum elevation angle among tracked satellites
Errors if minimum elevation is below 10 degrees
Warns if minimum elevation is below 15 degrees
Passes if all satellites are above 15 degrees elevation

17. RTK Initialization Time Check
pythondef check_rtk_initialization_time(self, max_time=120):
What it does: Measures how long it takes to achieve RTK Fixed status.
Why it's important: Fast initialization indicates good satellite visibility and base station connectivity.
Implementation details:

Times how long it takes to achieve RTK Fixed status
Excellent performance: ≤20 seconds
Acceptable performance: 21-60 seconds
Poor performance: >60 seconds
Fails if RTK Fixed isn't achieved within max_time (default 120s)
Provides detailed logging of initialization performance

18. Position Stability Check
pythondef check_position_stability(self, duration=60, interval=1, std_threshold=0.02):
What it does: Monitors position stability over time by calculating standard deviation.
Why it's important: Position jumps indicate poor solution quality or multipath issues.
Implementation details:

Collects position data at regular intervals
Calculates standard deviation of eastings and northings
Warns if combined standard deviation exceeds threshold (2cm)
Passes if position is stable within threshold

19. Antenna Placement Check
pythondef check_antenna_placement(self):
What it does: Validates antenna placement by checking satellite count and signal strength.
Why it's important: Poor antenna placement can reduce satellite visibility and signal strength.
Implementation details:

Combines satellite count and signal strength checks
Warns if fewer than 6 satellites or SNR below 35 dB-Hz
Passes if both metrics are good

These health checks provide comprehensive monitoring of the RTK GPS system's performance, ensuring reliable high-precision positioning for agricultural applications. The implementation now includes improved checks for age of corrections (millisecond precision), position validity (with farm boundaries), RTK initialization time (with performance levels), and GPS time synchronization (nanosecond precision).





RTK GPS System Thresholds and Actions for Emlid M2 GNSS
This document outlines the updated thresholds and actions for maintaining centimeter-level accuracy in an RTK GPS system using the Emlid Reach M2 GNSS receiver with NTRIP corrections in India. The rover moves at 1.5 m/s, necessitating rapid issue detection to prevent significant position errors. The user has specified that time thresholds should be in the 200–300 ms range, reflecting the receiver’s 5 Hz update rate (200 ms intervals). A new condition for monitoring low NTRIP data rate has been included to ensure reliable correction delivery. All thresholds are defined in milliseconds and centimeters to support precise positioning.
Overview
Real-Time Kinematic (RTK) GPS systems achieve centimeter-level accuracy by using correction data delivered via NTRIP (Networked Transport of RTCM via Internet Protocol). The Emlid Reach M2, configured for a 5 Hz position update rate (200 ms intervals), relies on a stable internet connection and robust monitoring to maintain accuracy for a rover moving at 1.5 m/s. At this speed, the rover travels 45 cm in 300 ms, making rapid detection of issues critical to prevent deviations exceeding the desired centimeter-level precision. The following conditions and actions are designed to detect and mitigate issues such as stale data, signal loss, or insufficient bandwidth, with time thresholds adjusted to the 200–300 ms range where appropriate.
Thresholds and Actions
1. GPS Data Stale

Threshold: No NMEA fix received for >300 ms
Description: The GPS receiver fails to update its position for over 300 ms, indicating stale data.
Impact: With the rover moving at 1.5 m/s, a 300 ms delay results in a 45 cm movement, risking significant drift from the intended path.
Action: Attempt to reconnect the GNSS receiver to obtain fresh data. If unsuccessful, sleep for 5 minutes to prevent erroneous navigation.
Rationale: At a 5 Hz update rate (200 ms per update), missing two updates (>300 ms) suggests a communication or receiver issue requiring immediate action.

2. Internet Corrections Lost (NTRIP)

Threshold: Correction delay >1,000 ms for >5,000 ms
Description: NTRIP corrections are delayed by more than 1 second, and this persists for over 5 seconds.
Impact: Delayed corrections reduce accuracy to decimeter or meter levels, causing the rover to deviate from its centimeter-accurate path.
Action: Reconnect the NTRIP client to restore correction flow. If the issue persists, sleep for 5 minutes.
Rationale: Corrections are typically sent at 1 Hz (every 1,000 ms). A delay >1,000 ms indicates network issues, and 5 seconds of persistence confirms a significant problem affecting accuracy.

3. Serial Data Loss

Threshold: No NMEA data on COM8 for >300 ms
Description: The GPS signal is not received via the serial port (COM8) for over 300 ms.
Impact: Loss of GPS data for 300 ms at 1.5 m/s results in a 45 cm position uncertainty, risking collisions or path deviations.
Action: Reconnect the GNSS receiver. If data is not restored, sleep for 5 minutes.
Rationale: Serial communication is critical for position data. Missing two updates at 5 Hz (>300 ms) suggests a hardware or connection failure.

4. Fix-Status Instability

Threshold: ≥3 drops from RTK fix to float mode in 30,000 ms
Description: The RTK fix, providing centimeter-level accuracy, switches to the less accurate float mode at least 3 times within 30 seconds.
Impact: Frequent drops cause position errors of 10–30 cm, leading to unpredictable rover movement, especially at 1.5 m/s.
Action: Monitor fix stability for 30 seconds. If instability persists, sleep for 5 minutes.
Causes and Fixes: Instability may result from poor satellite geometry, multipath interference, or weak corrections. Ensure clear sky visibility, minimize reflective surfaces, and verify NTRIP connection stability.
Rationale: The 30-second window is retained to detect patterns of instability without overreacting to transient drops.

5. Persistent Drift

Threshold: ≥6 position drifts >3 cm in 20,000 ms
Description: The rover’s position shifts by more than 3 cm at least 6 times within 20 seconds.
Impact: Persistent drift indicates GPS signal issues, such as multipath or weak corrections, causing the rover to deviate from its path.
Action: Monitor position stability. If drift continues, sleep for 5 minutes.
Rationale: The 20-second window allows detection of recurring drift while avoiding false positives from minor fluctuations.

6. Waypoint Deviation

Threshold: >5 cm distance or >5° heading deviation from planned path
Description: The rover deviates from its intended path by more than 5 cm or its heading shifts by more than 5 degrees.
Impact: Deviations can lead to operational inefficiencies or collisions, critical at 1.5 m/s where 300 ms equates to 45 cm of movement.
Action:
Continuously monitor deviation.
If threshold exceeded:
Alert the operator.
Adjust steering/navigation parameters to correct the path.


If corrections fail, pause operations, log the incident, return to the last known good waypoint, and recalculate the path.


Recovery Time: Attempt correction within 10,000 ms. If unsuccessful, pause for 5 minutes.
Rationale: A 5 cm or 5° deviation is significant for centimeter-level tasks, requiring immediate correction.

7. Position Jump

Threshold: Position change >30 cm or implied speed >0.5 m/s
Description: The rover’s position shifts suddenly by more than 30 cm, or its speed appears unrealistically high (>0.5 m/s).
Impact: Sudden jumps indicate GPS glitches, risking incorrect navigation or obstacle collisions, especially at 1.5 m/s.
Action: Stop the rover for 10,000 ms to verify data consistency. If jumps persist, sleep for 5 minutes.
Rationale: A 30 cm jump exceeds the rover’s normal movement (45 cm in 300 ms), indicating a data error.

8. High DOP

Threshold: PDOP >3.0 for >5,000 ms
Description: Position Dilution of Precision (PDOP) exceeds 3.0 for more than 5 seconds, indicating poor satellite geometry.
Impact: Poor geometry reduces RTK fix reliability, leading to less precise positioning.
Action: Wait 15,000 ms for improved geometry. If PDOP remains high, sleep for 5 minutes.
Rationale: A 5-second threshold balances sensitivity with stability, as satellite geometry changes slowly.

9. Weak Constellation

Threshold: <6 satellites visible for >5,000 ms
Description: Fewer than 6 satellites are detected for more than 5 seconds.
Impact: RTK requires at least 6 satellites for reliable positioning; fewer degrade accuracy significantly.
Action: Wait 20,000 ms for more satellites. If the constellation remains weak, sleep for 5 minutes.
Rationale: A 5-second threshold allows temporary drops while ensuring action if the issue persists.

10. Signal Multipath

Threshold: C/N₀ drop >10 dB-Hz for >5,000 ms
Description: Signal-to-noise ratio (C/N₀) drops by more than 10 dB-Hz for over 5 seconds, indicating multipath interference.
Impact: Multipath causes position errors of several centimeters, critical for a rover moving at 1.5 m/s.
Action: Stop the rover to prevent drift. Sleep for 5 minutes to allow environmental changes.
Rationale: A 5-second threshold detects sustained interference without reacting to brief fluctuations.

11. RTK Fix Lost

Threshold: No RTK fix for >10,000 ms
Description: The rover loses RTK fix, reverting to float mode, for more than 10 seconds.
Impact: Float mode reduces accuracy to meter-level, unsuitable for precise navigation at 1.5 m/s.
Action: Monitor for fix regain within 30,000 ms. If not restored, sleep for 5 minutes.
Rationale: A 10-second threshold allows brief losses while ensuring action for prolonged issues.

12. High NTRIP Latency

Threshold: Average correction age >1,000 ms for >10,000 ms
Description: Correction data is delayed by more than 1 second on average for over 10 seconds.
Impact: Stale corrections degrade RTK accuracy, affecting positioning precision at 1.5 m/s.
Action: Reconnect the internet to fetch fresh corrections. If latency persists, sleep for 5 minutes.
Rationale: A 1-second average age threshold ensures timely corrections, critical for centimeter accuracy.

13. Complete Internet Signal Loss

Threshold: No corrections for >5,000 ms and no cellular signal for >10,000 ms
Description: Both NTRIP corrections and cellular connectivity are lost for the specified durations.
Impact: Without corrections or cellular data, the rover cannot maintain accurate positioning, risking significant drift.
Action: Attempt to reconnect the internet. If connectivity is not restored, sleep for 5 minutes.
Rationale: A 5-second threshold for corrections and 10 seconds for cellular loss ensures rapid response to total connectivity failures.

14. Low NTRIP Data Rate

Threshold: Average NTRIP data rate <2.4 kbps for >30,000 ms
Description: The rate of NTRIP correction data received falls below 2.4 kilobits per second (kbps) over a 30-second period (equivalent to <9,000 bytes in 30 seconds).
Impact: A low data rate indicates insufficient bandwidth, leading to delayed or missing corrections, degrading RTK accuracy and causing path deviations.
Action: Attempt to reconnect the NTRIP client to improve data flow. If the data rate remains below 2.4 kbps, sleep for 5 minutes to prevent inaccurate positioning.
Implementation: Monitor total bytes received in a sliding 30-second window, updated every second. If the total is <9,000 bytes for 30 consecutive seconds, trigger the action.
Rationale: Typical RTCM3 correction data rates for GPS and GLONASS are 2.2 kbps (1 MB/hour, or 277 bytes/second). A 2.4 kbps threshold ensures sufficient bandwidth for reliable correction delivery, complementing latency-based checks.

Technical Details
Emlid Reach M2 Update Rate
The Emlid Reach M2 supports a position update rate of up to 10 Hz (100 ms intervals), but the user’s configuration likely uses 5 Hz (200 ms intervals), as indicated by standard settings in Emlid’s documentation (Emlid Reach M2 Docs). At 5 Hz, the receiver outputs a position every 200 ms, meaning a 300 ms threshold corresponds to missing approximately two updates, a reasonable point to detect staleness without overreacting to transient issues.



Parameter
Value



Update Rate
5 Hz (200 ms)


Position Output
NMEA format


Expected Updates
Every 200 ms


Stale Threshold
>300 ms (2 updates missed)


Rover Speed and Error Analysis
The rover’s speed of 1.5 m/s translates to significant movement over short time intervals, impacting the choice of thresholds:

In 200 ms: 1.5 m/s × 0.2 s = 0.3 m (30 cm)
In 300 ms: 1.5 m/s × 0.3 s = 0.45 m (45 cm)
In 1,000 ms: 1.5 m/s × 1 s = 1.5 m

Given the centimeter-level accuracy requirement, a 45 cm error in 300 ms is substantial, justifying thresholds in the 200–300 ms range for data reception issues. For example, if GPS data is stale for 300 ms, the rover’s last known position could be 45 cm off, necessitating rapid detection and correction.
NTRIP Correction Rate and Latency
NTRIP corrections are typically sent at 1 Hz (every 1,000 ms) for RTCM3 messages such as 1002 (GPS observations) and 1006 (station coordinates), as configured in Emlid Flow (Emlid Base Mode Docs). The age of correction increases from 0 to 1,000 ms between updates, with an average age of ~500 ms. For centimeter-level accuracy, corrections should ideally be <1–2 seconds old, as older corrections introduce errors due to atmospheric changes (e.g., ionospheric drift at ~1 cm/min). The adjusted thresholds (>1,000 ms delay for >5,000 ms) ensure rapid response to delays while accounting for the 1 Hz correction rate.



RTCM3 Message
Typical Rate
Purpose



1002
1 Hz (1,000 ms)
GPS L1 observations


1006
0.1 Hz (10 s)
Station coordinates


1010
1 Hz (1,000 ms)
GLONASS L1 observations


NTRIP Data Rate Calculation
The data rate for NTRIP corrections depends on RTCM3 message types and satellite count. For GPS and GLONASS, the data rate is approximately 1 MB per hour:

Calculation: 1 MB/hour = 1,000,000 bytes / 3,600 s ≈ 277.78 bytes/s × 8 ≈ 2,222.22 bits/s ≈ 2.2 kbps.
Threshold: 2.4 kbps (300 bytes/s × 30 s = 9,000 bytes) provides a buffer above the typical 2.2 kbps, ensuring reliable delivery.

For specific messages:

Message 1002: ~10.385 bytes/s per satellite at 1 Hz, scaling with satellite count.
Message 1006: ~27 bytes/s at 0.5 Hz.
Message 1010: ~11.3 bytes/s.

A configuration with ~10 satellites yields ~1.0–2.3 kbps, making 2.4 kbps a practical threshold (Emlid Community Forum).
Integration with Existing Checks
The "Low NTRIP Data Rate" condition complements:

Internet Corrections Lost: Detects significant delays (>1,000 ms).
High NTRIP Latency: Monitors average correction age (>1,000 ms).
Complete Internet Signal Loss: Addresses total connectivity loss.

By monitoring data rate, it catches slow connections that may not trigger latency-based checks, ensuring robust correction delivery.
Implementation Considerations

Data Rate Monitoring: Track bytes received in a 30-second sliding window, updated every second. If <9,000 bytes, the data rate is below 2.4 kbps, triggering reconnection.
Threshold Sensitivity: A 300 ms threshold for GPS data staleness is sensitive but feasible, as it corresponds to missing two updates at 5 Hz.
Network Variability: India’s cellular networks may introduce latency or bandwidth fluctuations. The 30-second window for data rate mitigates false positives from brief slowdowns.
Emlid M2 Compatibility: The Reach M2 supports reconnection logic via Emlid Flow, compatible with the proposed actions (Emlid Docs).

Recommendations

Validate Thresholds: Test the 300 ms thresholds in your environment, as satellite visibility or network conditions in India may require fine-tuning.
Monitor Network Quality: Use tools like ping or signal strength indicators to diagnose low data rates or high latency, especially in areas with weak cellular coverage.
Check NTRIP Service: Contact your NTRIP provider in India to confirm correction rates and expected latency, adjusting thresholds if higher rates (e.g., 5 Hz) are used.
Log Incidents: Record triggers of low data rate or stale data to identify patterns, such as specific locations or times with poor connectivity.
Firmware Updates: Ensure the Reach M2 is updated to the latest firmware, as updates may support higher update rates (e.g., 20 Hz for RINEX logging) (Emlid Reach M2 Specs).

Conclusion
Adjusting time thresholds to the 200–300 ms range for data reception conditions and tightening correction delay thresholds to ~1,000 ms ensures rapid detection of issues, critical for a rover moving at 1.5 m/s. The addition of the "Low NTRIP Data Rate" condition enhances system reliability by monitoring internet bandwidth. These measures maintain centimeter-level accuracy, minimizing the risk of drift or navigation errors in demanding applications.
